/*
 * Copyright 2011, 2012 Gary R. Van Sickle (grvs@users.sourceforge.net).
 *
 * This file is part of CoFlo.
 *
 * CoFlo is free software: you can redistribute it and/or modify it under the
 * terms of version 3 of the GNU General Public License as published by the Free
 * Software Foundation.
 *
 * CoFlo is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * CoFlo.  If not, see <http://www.gnu.org/licenses/>.
 */

/** @file */

#ifndef RUNTIMECONFIGURATION_H_
#define RUNTIMECONFIGURATION_H_

#include <boost/program_options.hpp>
#include <string>

// Include the config.h file generated by configure.
#include "../config.h"

/// @name Command line parameter strings.
/// Using defines for these because Boost.ProgramOptions uses them (generally) twice.
///@{
#define CLP_HELP	"help"
#define CLP_VERSION	"version"
#define CLP_BUILD_INFO	"build-info"

#define CLP_RESPONSE_FILE "response-file"
#define CLP_DEBUG_PARSE "debug-parse"
#define CLP_DEBUG_LINK  "debug-link"
#define CLP_DEBUG_CFG	"debug-cfg"
#define CLP_TEMPS_DIR	"temps-dir"
#define CLP_OUTPUT_DIR	"output-dir"

#define CLP_DEFINE	"define"
#define CLP_INCLUDE_DIR	"include-dir"

#define CLP_USE_GCC "use-gcc"
#define CLP_USE_DOT "use-dot"
#define CLP_USE_FILTER "use-filter"

#define CLP_PRINT_FUNCTION_CFG "cfg"
#define CLP_CFG_FMT "cfg-fmt"
#define CLP_CFG_VERBOSE "cfg-verbose"
#define CLP_CFG_VERTEX_IDS "cfg-vertex-ids"
#define CLP_CFG_OUTPUT_FILENAME "cfg-output-file"

#define CLP_CONSTRAINT "constraint"

#define CLP_INPUT_FILE "input-file"

#define CLP_CONF_FILE_FORMAT_VERSION "file.info.format_version"
///@}

/**
 * Class which serves as a database for the runtime options specified on the command line and in various configuration files.
 */
class RuntimeConfiguration
{
public:
	RuntimeConfiguration(int argc, char *argv[]);
	~RuntimeConfiguration();

	boost::program_options::variables_map GetVarMapCopy() { return m_vm; };

	bool wasHelpOrVersion() const { return m_was_help_or_version; };

private:

	// Name of the response file if we get one on the command line.
	std::string response_filename;

	void ParseAllOptionSources(int argc, char *argv[]);

	/**
	 * Perform the one-time setup of the program options.
	 */
	void Setup();


	/// The variables_map which will store the options.
	boost::program_options::variables_map m_vm;

	/// Notes whether the user asked for help or version info.
	bool m_was_help_or_version;

};

#endif /* RUNTIMECONFIGURATION_H_ */
